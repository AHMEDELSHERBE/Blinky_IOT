/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/7628756c-3680-4cef-8d8b-5d5679814f6a 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudDimmedLight dimmer;
  CloudTemperatureSensor temprature;
  bool toggle;
  bool uy;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Temperature and humidity monitoring"
  https://create.arduino.cc/cloud/things/4202742a-b802-4d86-8f85-2a73394c0797 
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing
 
  CloudRelativeHumidity humidity;
  String msg;
  CloudTemperatureSensor temperature;
 
 Variables which are marked as READ/WRITE in the Cloud Thing will also have functions   which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
 
#include "thingProperties.h"
#include "DHT.h"
#define DHTpin 2 // D4 on the nodemcu ESP8266
#define DHTTYPE DHT11
DHT dht(DHTpin,DHTTYPE);
int Dimmer=D2;
void setup() {
pinMode(D1,OUTPUT);
pinMode(D2,OUTPUT);
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  onTempratureChange();
   


}


/*
  Since Uy is READ_WRITE variable, onUyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onuyChange()  {
 
}







/*
  Since Dimmer is READ_WRITE variable, onDimmerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDimmerChange()  {
  float brightness = dimmer.getBrightness();
  Serial.print("Current brightness: ");
  Serial.println(brightness);
  analogWrite(D1, map(brightness, 0, 100, 0, 255));
  
  
  // Set the brightness of the LED
  


}
/*
  Since Uy is READ_WRITE variable, onUyChange() is
  executed every time a new value is received from IoT Cloud.
*/



/*
  Since Uy is READ_WRITE variable, onUyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onUyChange()  {
 if(uy)
 {
   digitalWrite(D2,HIGH);
   Serial.print("On");
   delay(1000);
 }
 else
 {
   digitalWrite(D2,LOW);
   Serial.print("Off");
   delay(1000);
 }
}




/*
  Since Temprature is READ_WRITE variable, onTempratureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempratureChange()  {
temprature=dht.readTemperature();
      Serial.print("Temperature ");
    Serial.println(temprature);
}



/*
  Since Toggle is READ_WRITE variable, onToggleChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onToggleChange()  {
  if(toggle)
 {
   digitalWrite(D2,HIGH);
   digitalWrite(D1,LOW);
     delay(1000);
     digitalWrite(D1,HIGH);
   digitalWrite(D2,LOW);
     delay(500);
     digitalWrite(D2,LOW);
   digitalWrite(D1,LOW);
     delay(1000);
      digitalWrite(D2,HIGH);
   digitalWrite(D1,LOW);
     delay(1000);
     digitalWrite(D1,HIGH);
   digitalWrite(D2,LOW);
     delay(500);
}
}
